"""
Monitors our code & docs for changes
"""

import os
import sys
import subprocess
import datetime
import time

from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from terminal import colorize

BASEDIR = os.path.abspath(os.path.dirname(__file__))
newpath, drop = os.path.split(BASEDIR)
BASEDIR = newpath

line = 70 * "-"

def daemon_message():
    message = "This is a daemon to livedevelop your build process"
    rows = [line,
        "  This daemon rebuilds your software everytime you save a change ",
        "  on buildout.cfg, development.cfg, staging.cfg or production.cfg. ",
        line,
        "  Push " + colorize(' CTRL+C ', 'black', background=True) + " to stop him.",
        line
        ]
    print
    print line
    print ' ' + colorize(' DAEMON running ', 'red', background=True) + (' %s' % message)
    for row in rows:
        print row
    print

def get_now():
    "Get the current date and time as a string"

    return datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S")

def run_buildout():
    "Run buildout."

    print line
    print ' ' + colorize(' INFO ', 'yellow', background=True) + " Running buildout at %s" % get_now()
    print line
    os.chdir(BASEDIR)
    subprocess.call(r'bin/buildout')

def getfilenname(filename):
    "Get the filename without abspath."

    return os.path.basename(filename)

def getext(filename):
    "Get the file extension."

    return os.path.splitext(filename)[-1].lower()

class ChangeHandler(FileSystemEventHandler):
    """
    React to changes in Python and Rest files by
    running unit tests (Python) or building docs (.rst)
    """

    def on_any_event(self, event):
        "If any file or folder is changed"

        filenames = ['buildout.cfg', 'development.cfg', 'staging.cfg', 'production.cfg']
        if event.is_directory:
            return
        for filename in filenames:
            if getfilenname(event.src_path) == filename:
                run_buildout()
                daemon_message()

def main():
    """
    Called when run as main.
    Look for changes to code and doc files.
    """
    daemon_message()
    event_handler = ChangeHandler()
    observer = Observer()
    observer.schedule(event_handler, BASEDIR, recursive=True)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == '__main__':
    main()

